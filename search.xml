<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA中的权限修饰符到底有什么区别？</title>
    <url>/zh/posts/2020/0806/java-access-modifiers/</url>
    <content><![CDATA[<p>昨天突然有人问我：你知道Java中的权限修饰符有哪些吗？</p>
<p><img src= "/zh/img/loading.gif" data-lazy-src="https://tse2.mm.bing.net/th?id=OIP.c7okrWfG1o4QjtrCJKHgPwAAAA&pid=Api&P=0&w=198&h=111" alt="img"></p>
<p>我也就知道有Private和Public啥的，其他的就记不清了。。</p>
<p>但是人家都问了，肯定是要给个回复哒。所以我就开始翻书研究</p>
<p><img src= "/zh/img/loading.gif" data-lazy-src="https://tse3.mm.bing.net/th?id=OIP.TFA2kWIvayPjJUThBgPiRgAAAA&pid=Api&P=0&w=300&h=300" alt="img"></p>
<p>一番研究后，我算是搞懂了，那么现在就来到了分享时间：</p>
<hr>
<h1 id="JAVA中的权限修饰符"><a href="#JAVA中的权限修饰符" class="headerlink" title="JAVA中的权限修饰符"></a>JAVA中的权限修饰符</h1><h2 id="修饰符的种类"><a href="#修饰符的种类" class="headerlink" title="修饰符的种类"></a>修饰符的种类</h2><p>Java中的权限修饰符分为三种，以及一个默认设置：</p>
<ul>
<li><code>Public</code> - 公有</li>
<li><code>Private</code> - 私有</li>
<li><code>Protected</code> - 保护</li>
<li><code>Default</code> - 默认</li>
</ul>
<p>​    那么先说说用得最多的<u>Public</u>和<u>Private</u>。</p>
<p>​    首先，修饰符为<strong>Public</strong>的类，变量，方法或对象可以被所有本类，同一个包中的其他类和子类或其他包中的类和子类访问。也就是说，带有这个修饰符的元素在这个Java项目中是<font color="orange"><strong>完全公开</strong></font>存在的，任何此项目中的成员都可以去访问里面的内容。</p>
<p>​    相反，修饰符为<strong>Private</strong>的元素就仅能被<font color="orange"><strong>本类</strong></font>中的其他元素或内部类访问。一旦一个元素被标示了Private修饰符，他在这个项目中便是私有的，只能在创建该元素的类中访问。</p>
<p>​    然后就是在初学者的项目里不那么常见的<strong>Protected</strong>，带有Protected修饰符的类或对象仅允许<font color="orange"><strong>本类</strong></font>或<font color="orange"><strong>同包</strong></font>中的其他类和子类所访问。</p>
<p>​    最后是Default，字面意思就是默认类型，也就是不加任何修饰符。默认情况下，如果元素没有添加任何的修饰符，将默认为<strong>包存取范围</strong>。也就是<font color="orange"><strong>同包</strong></font>中的所有类或子类都可以调用此元素。</p>
<h2 id="权限表："><a href="#权限表：" class="headerlink" title="权限表："></a>权限表：</h2><p>以下为一张表格，分别显示了三种修饰符的权限：</p>
<table>
<thead>
<tr>
<th>访问包位置</th>
<th align="center">Public</th>
<th align="center">Private</th>
<th align="center">Protected</th>
</tr>
</thead>
<tbody><tr>
<td>本类</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td>同包中的其他类或子类</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center">√</td>
</tr>
<tr>
<td>其他包中的类或子类</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>​        总的来说，<code>Public</code>和<code>Protected</code>修饰的类可以由子类访问，但如果子类和父类不在同一个包中，那么只有修饰符为Public的类可以被子类进行访问。如果父类不允许通过继承产生的子类访问它的成员变量，那么必须使用<code>Private</code>声明父类的这个成员变量</p>
]]></content>
      <categories>
        <category>语言笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>权限修饰符</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python3.x】数字类型</title>
    <url>/zh/posts/2020/0805/python-3-numbers/</url>
    <content><![CDATA[<h1 id="Python3-中的数字"><a href="#Python3-中的数字" class="headerlink" title="Python3 中的数字"></a>Python3 中的数字</h1><p>Python3 支持的数字类型</p>
<ul>
<li><strong>整型(int)</strong> - 通常被称为是整型或整数，是正或负整数。<u><strong>不带小数点，不限制大小</strong></u>，可以当作 Long （长整数）类型使用</li>
<li><strong>浮点型(float)</strong> - 浮点型由<u><strong>整数部分</strong></u>与**<u>小数部分</u>**组成，可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li>
<li><strong>复数(complex)</strong> - 复数由<u><strong>实数部分</strong></u>和<u><strong>虚数部分</strong></u>构成，可以用<code>a + bj</code>,或者<code>complex(a,b)</code>表示， 复数的实部a和虚部b都是<u><strong>浮点型</strong></u>。</li>
</ul>
<p>例子：</p>
<table>
<thead>
<tr>
<th align="left">int 整形（16进制也属于整数）</th>
<th align="left">float 浮点数 (注：复数的实部a和虚部b都是浮点型。)</th>
<th align="left">complex 复数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">10</td>
<td align="left">0.0</td>
<td align="left">3.14j</td>
</tr>
<tr>
<td align="left">100</td>
<td align="left">15.20</td>
<td align="left">45.j</td>
</tr>
<tr>
<td align="left">-786</td>
<td align="left">-21.9</td>
<td align="left">9.322e-36j</td>
</tr>
<tr>
<td align="left">080</td>
<td align="left">23.42</td>
<td align="left">.876j</td>
</tr>
<tr>
<td align="left">-0490</td>
<td align="left">-90.</td>
<td align="left">-.6545+0J</td>
</tr>
<tr>
<td align="left">-0x260</td>
<td align="left">-32.54e100</td>
<td align="left">3e+26J</td>
</tr>
<tr>
<td align="left">0x69</td>
<td align="left">70.2E-12</td>
<td align="left">4.53e-7j</td>
</tr>
</tbody></table>
<p>其他例如十进制以外的数字也可以使用（数字10为例）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#赋值</span></span><br><span class="line">num = <span class="number">0xa</span> <span class="comment">#十六进制 Hexadecimal</span></span><br><span class="line">num = <span class="number">0o12</span> <span class="comment">#八进制 Octal</span></span><br><span class="line">num = <span class="number">0b1010</span> <span class="comment">#二进制 Binary</span></span><br></pre></td></tr></table></figure>



<h2 id="Python-数字类型转换"><a href="#Python-数字类型转换" class="headerlink" title="Python 数字类型转换"></a>Python 数字类型转换</h2><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p>
<ul>
<li><strong>int(x)</strong> - 将x转换为一个整数。</li>
<li><strong>float(x)</strong> - 将x转换到一个浮点数。</li>
<li><strong>complex(x)</strong> - 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li>
<li><strong>complex(x, y)</strong> - 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</li>
<li><strong>hex(x)</strong> - 将 x 转换为16进制数，前缀0x。</li>
<li><strong>oct(x)</strong> - 将 x 转换为8进制数，前缀0o。</li>
<li><strong>bin(x)</strong> - 将 x 转换为2进制数，前缀0b。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(x) <span class="comment">#转换为整数（不会四舍五入）</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(x) <span class="comment">#转换为浮点数（整数默认往后显示一位）</span></span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>complex(x) <span class="comment">#转换为复数（虚数部分为0）</span></span><br><span class="line">(<span class="number">10</span>+<span class="number">0j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>complex(x,<span class="number">5j</span>) <span class="comment">#转换为复数（定义虚数部分）</span></span><br><span class="line">(<span class="number">5</span>+<span class="number">0j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(x) <span class="comment">#转换到16进制</span></span><br><span class="line"><span class="number">0xa</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(x) <span class="comment">#转换到8进制</span></span><br><span class="line"><span class="number">0o12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(x) <span class="comment">#转换到2进制</span></span><br><span class="line"><span class="number">0b1010</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语言笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python3.x】字符串</title>
    <url>/zh/posts/2020/0804/python-3-string/</url>
    <content><![CDATA[<h1 id="Python3-中的字符串"><a href="#Python3-中的字符串" class="headerlink" title="Python3 中的字符串"></a>Python3 中的字符串</h1><p>字符串是编程语言中较为常用的数据类型，用于存储文字、单词、语句等字符内容，Python中也是一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Python 中，可以使用 &#x27;&#x27; 或 &quot;&quot; 来创建字符串 (注意必须是半角符号)</span></span><br><span class="line">str1 = <span class="string">&#x27;我是一个字符串&#x27;</span></span><br><span class="line">str2 = <span class="string">&quot;我也是一个字符串&quot;</span></span><br></pre></td></tr></table></figure>

<p>访问字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;I am a String&#x27;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;str1 - &#x27;</span>,str1) <span class="comment">#输出整个字符串</span></span><br><span class="line">print(<span class="string">&#x27;str1[2:] - &#x27;</span>,str1[<span class="number">2</span>:]) <span class="comment">#从第二个字符开始输出（不包括第二个）</span></span><br><span class="line">print(<span class="string">&#x27;str1[:6] - &#x27;</span>,str1[:<span class="number">6</span>]) <span class="comment">#从开始读到第六个字符（不包括第六个）</span></span><br><span class="line">print(<span class="string">&#x27;str1[7:13] - &#x27;</span>,str1[<span class="number">7</span>:<span class="number">13</span>]) <span class="comment">#输出第8到第13位的字符（不包括第八个）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">str1 - I am a String</span><br><span class="line">str1[<span class="number">2</span>:] - am a String</span><br><span class="line">str1[:<span class="number">6</span>] - I am a</span><br><span class="line">str1[<span class="number">7</span>:<span class="number">13</span>] - String</span><br></pre></td></tr></table></figure>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表：</p>
<table>
<thead>
<tr>
<th align="left">转义字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">(在行尾时)</td>
<td align="left">续行符</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">反斜杠符号</td>
</tr>
<tr>
<td align="left">&#39;</td>
<td align="left">单引号</td>
</tr>
<tr>
<td align="left">&quot;</td>
<td align="left">双引号</td>
</tr>
<tr>
<td align="left">\a</td>
<td align="left">响铃</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">退格(Backspace)</td>
</tr>
<tr>
<td align="left">\000</td>
<td align="left">空</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">换行</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">纵向制表符</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">横向制表符</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">回车</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页</td>
</tr>
<tr>
<td align="left">\oyy</td>
<td align="left">八进制数，<strong>yy</strong> 代表的字符，例如：<strong>\o12</strong> 代表换行，其中 o 是字母，不是数字 0。</td>
</tr>
<tr>
<td align="left">\xyy</td>
<td align="left">十六进制数，yy代表的字符，例如：\x0a代表换行</td>
</tr>
<tr>
<td align="left">\other</td>
<td align="left">其它的字符以普通格式输出</td>
</tr>
</tbody></table>
<h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>下表实例变量 a 值为字符串 “Hello”，b 变量值为 “Python”：</p>
<table>
<thead>
<tr>
<th align="left">操作符</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="left">字符串连接</td>
<td align="left">a + b 输出结果： HelloPython</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">重复输出字符串</td>
<td align="left">a*2 输出结果：HelloHello</td>
</tr>
<tr>
<td align="left">[]</td>
<td align="left">通过索引获取字符串中字符</td>
<td align="left">a[1] 输出结果 <strong>e</strong></td>
</tr>
<tr>
<td align="left">[ : ]</td>
<td align="left">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</td>
<td align="left">a[1:4] 输出结果 <strong>ell</strong></td>
</tr>
<tr>
<td align="left">in</td>
<td align="left">成员运算符 - 如果字符串中包含给定的字符返回 True</td>
<td align="left"><strong>‘H’ in a</strong> 输出结果 True</td>
</tr>
<tr>
<td align="left">not in</td>
<td align="left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td>
<td align="left"><strong>‘M’ not in a</strong> 输出结果 True</td>
</tr>
<tr>
<td align="left">r/R</td>
<td align="left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td>
<td align="left"><code>print( r&#39;\n&#39; ) print( R&#39;\n&#39; )</code></td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">格式字符串</td>
<td align="left">请看下一节内容。</td>
</tr>
</tbody></table>
<h2 id="Python-的字符串内建函数"><a href="#Python-的字符串内建函数" class="headerlink" title="Python 的字符串内建函数"></a>Python 的字符串内建函数</h2><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><code>capitalize()</code> 将字符串的第一个字符转换为大写</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>center(width, fillchar)</code> 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><code>count(str, beg= 0,end=len(string))</code> 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code> Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><code>encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code> 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><code>endswith(suffix, beg=0, end=len(string))</code> 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><code>expandtabs(tabsize=8)</code> 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><code>find(str, beg=0, end=len(string))</code> 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><code>index(str, beg=0, end=len(string))</code> 跟find()方法一样，只不过如果str不在字符串中会报一个异常。</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><code>isalnum() </code>如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><code>isalpha()</code> 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><code>isdigit()</code> 如果字符串只包含数字则返回 True 否则返回 False..</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><code>islower()</code> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><code>isnumeric()</code> 如果字符串中只包含数字字符，则返回 True，否则返回 False</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left"><code>isspace()</code> 如果字符串中只包含空白，则返回 True，否则返回 False.</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left"><code>istitle()</code> 如果字符串是标题化的(见 title())则返回 True，否则返回 False</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left"><code>isupper()</code> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left"><code>join(seq)</code> 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left"><code>len(string)</code> 返回字符串长度</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left"><code>ljust(width[, fillchar])</code> 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left"><code>lower()</code> 转换字符串中所有大写字符为小写.</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left"><code>lstrip()</code> 截掉字符串左边的空格或指定字符。</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left"><code>maketrans()</code> 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left"><code>max(str)</code> 返回字符串 str 中最大的字母。</td>
</tr>
<tr>
<td align="left">25</td>
<td align="left"><code>min(str)</code> 返回字符串 str 中最小的字母。</td>
</tr>
<tr>
<td align="left">26</td>
<td align="left"><code>replace(old, new [,max])</code> 把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</td>
</tr>
<tr>
<td align="left">27</td>
<td align="left"><code>rfind(str, beg=0,end=len(string))</code> 类似于 find()函数，不过是从右边开始查找.</td>
</tr>
<tr>
<td align="left">28</td>
<td align="left"><code>rindex( str, beg=0, end=len(string))</code> 类似于 index()，不过是从右边开始.</td>
</tr>
<tr>
<td align="left">29</td>
<td align="left"><code>rjust(width[,fillchar])</code> 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td>
</tr>
<tr>
<td align="left">30</td>
<td align="left"><code>rstrip()</code> 删除字符串字符串末尾的空格.</td>
</tr>
<tr>
<td align="left">31</td>
<td align="left"><code>split(str=&quot;&quot;, num=string.count(str))</code> num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td>
</tr>
<tr>
<td align="left">32</td>
<td align="left"><code>splitlines([keepends])</code> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td>
</tr>
<tr>
<td align="left">33</td>
<td align="left"><code>startswith(substr, beg=0,end=len(string))</code> 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td>
</tr>
<tr>
<td align="left">34</td>
<td align="left"><code>strip([chars])</code> 在字符串上执行 lstrip()和 rstrip()</td>
</tr>
<tr>
<td align="left">35</td>
<td align="left"><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写</td>
</tr>
<tr>
<td align="left">36</td>
<td align="left"><code>title()</code> 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td>
</tr>
<tr>
<td align="left">37</td>
<td align="left"><code>translate(table, deletechars=&quot;&quot;)</code> 根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td>
</tr>
<tr>
<td align="left">38</td>
<td align="left"><code>upper()</code> 转换字符串中的小写字母为大写</td>
</tr>
<tr>
<td align="left">39</td>
<td align="left"><code>zfill (width)</code> 返回长度为 width 的字符串，原字符串右对齐，前面填充0</td>
</tr>
<tr>
<td align="left">40</td>
<td align="left"><code>isdecimal()</code> 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>语言笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
</search>
